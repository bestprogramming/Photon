using Photon;
using System.Drawing;
using Xunit.Abstractions;
using G = Photon.Geogebra;

namespace Tests
{
    public class Circle3ProjectionTest : BaseTest
    {
        public Circle3ProjectionTest(ITestOutputHelper output) : base(output) {}

        [Fact]
        public void TwoCircle3Projections1()
        {
            Sphere s1, s2, s3;
            bool ok1, ok2, ok3;
            Circle3Projection cp1, cp2;
            Point3 p1, p2;

            s1 = new Sphere(-3, 0, 0, 4);
            s2 = new Sphere(0, 3, 0, 4);
            s3 = new Sphere(3, 0, 0, 4);
            ok1 = s1.Intersect(s3, out cp1);
            ok2 = s2.Intersect(s3, out cp2);
            ok3 = cp1.Intersect(cp2, out p1, out p2);
            Assert.True(ok3 && Point3sIn(new[] { p1, p2 }, "0.0000000000000000000000000000000000000000000000000000000000000009", "0.0000000000000000000000000000000000000000000000000000000000000562", "-2.6457513110645905905016157536392604257102591830824501803683344580", "0.0000000000000000000000000000000000000000000000000000000000000009", "0.0000000000000000000000000000000000000000000000000000000000000562", "2.6457513110645905905016157536392604257102591830824501803683344580"));

            s1 = new Sphere(-3, 0, 0, 4);
            s2 = new Sphere(3, 0, 0, 4);
            s3 = new Sphere(0, 3, 0, 4);
            ok1 = s1.Intersect(s3, out cp1);
            ok2 = s2.Intersect(s3, out cp2);
            ok3 = cp1.Intersect(cp2, out p1, out p2);
            Assert.True(ok3 && Point3sIn(new[] { p1, p2 }, "-0.0000000000000000000000000000000000000000000000000000000000000001", "0.0000000000000000000000000000000000000000000000000000000000000585", "2.6457513110645905905016157536392604257102591830824501803683344586", "-0.0000000000000000000000000000000000000000000000000000000000000001", "0.0000000000000000000000000000000000000000000000000000000000000585", "-2.6457513110645905905016157536392604257102591830824501803683344586"));

            s1 = new Sphere(-3.3453, 1.4345, -2.3439, 4.3456);
            s2 = new Sphere(2.7834, 1.3435, -1.7733, 5.3566);
            s3 = new Sphere(-0.4435, 3.1298, -1.2345, 4.3456);
            ok1 = s1.Intersect(s3, out cp1);
            ok2 = s2.Intersect(s3, out cp2);
            ok3 = cp1.Intersect(cp2, out p1, out p2);
            Assert.True(ok3 && Point3sIn(new[] { p1, p2 }, "-0.7353081966946305017075620887960110053523069767793244216600338050", "2.7622889823869758963537272310093508057602619821148130057640474860", "-5.5546878417812884871327866065213489196187703096175492935861772019", "-1.3989075477033350998351960411738797628965333706758488887164889291", "-0.4326804469808659259239920965507855328761310346002082592552868478", "1.0633617979918872997978732568159072833633719289618400354182100573"));

            s1 = new Sphere(-3.3453, 1.4345, -2.3439, 4.3456);
            s2 = new Sphere(-0.4435, 3.1298, -1.2345, 4.3456);
            s3 = new Sphere(2.7834, 1.3435, -1.7733, 5.3566);
            ok1 = s1.Intersect(s3, out cp1);
            ok2 = s2.Intersect(s3, out cp2);
            ok3 = cp1.Intersect(cp2, out p1, out p2);
            Assert.True(ok3 && Point3sIn(new[] { p1, p2 }, "-1.3989075477033350839966016654124107047495048186351725910815035411", "-0.4326804469808657983297055489947455206432036101807652221945599542", "1.0633617979918872997978732568159072833633719289618400354182100506", "-0.7353081966946305044332268107665022959018644147027714587487242985", "2.7622889823869758336416348801549559657862293008864590456970563238", "-5.5546878417812884871327866065213489196187703096175492935861772006"));


            var geogebra = G.Execute(
                G.Sphere(s1, "s1"),
                G.Sphere(s2, "s2"),
                G.Sphere(s3, "s3"),
                G.IntersectConic("s1", "s3", "i1"),
                G.IntersectConic("s2", "s3", "i2"),

                //ok1 ? G.EllipseXy(cp1.Xy, "Xy1") : "",
                //ok1 ? G.EllipseYz(cp1.Yz, "Yz1") : "",
                //ok1 ? G.EllipseZx(cp1.Zx, "Zx1") : "",

                //ok2 ? G.EllipseXy(cp2.Xy, "Xy2") : "",
                //ok2 ? G.EllipseYz(cp2.Yz, "Yz2") : "",
                //ok2 ? G.EllipseZx(cp2.Zx, "Zx2") : "",

                ok3 ? G.Point(p1, "P1") : "",
                ok3 ? G.Point(p2, "P2") : "",
                "");
        }

        [Fact]
        public void TwoCircle3Projections2()
        {
            Sphere s1, s2, s3;
            bool ok1, ok2, ok3;
            Circle3Projection cp1, cp2;
            Point3 p1, p2;

            s1 = new Sphere(-0.17, 0.09, -0.28, 0.4);
            s2 = new Sphere(0.3, 0.3, 0, 0.4);
            s3 = new Sphere(0.3, 0, 0, 0.4);
            ok1 = s1.Intersect(s3, out cp1);
            ok2 = s2.Intersect(s3, out cp2);
            ok3 = cp1.Intersect(cp2, out p1, out p2);
            Assert.True(ok3 && Point3sIn(new[] { p1, p2 }, "-0.0573266712463943832134113931067665458740764563202078133002861250", "0.1499999999999999999999999999999999999999999999999999999999999989", "0.0990840553064477146796548384292152734314854802517774008969089807", "0.2170059228334308015227999664445547182763484242453665169421171828", "0.1499999999999999999999999999999999999999999999999999999999999987", "-0.3614027990418302739846999436747882771067277121261509391528394543"));

            s1 = new Sphere(0.34, 0.04, 0, 0.4);
            s2 = new Sphere(0, 0.3, 0, 0.4);
            s3 = new Sphere(0.3, 0, 0, 0.4);
            ok1 = s1.Intersect(s3, out cp1);
            ok2 = s2.Intersect(s3, out cp2);
            ok3 = cp1.Intersect(cp2, out p1, out p2);
            Assert.True(ok3 && Point3sIn(new[] { p1, p2 }, "0.1699999999999999999999999999999999999999999999999999999999999906", "0.1699999999999999999999999999999999999999999999999999999999999894", "0.3379349049743160224886214895427789605467611724217829980486925084", "0.1699999999999999999999999999999999999999999999999999999999999906", "0.1699999999999999999999999999999999999999999999999999999999999894", "-0.3379349049743160224886214895427789605467611724217829980486925084"));

            s1 = new Sphere(3.4, 0.4, 0, 4);
            s2 = new Sphere(0, 3, 0, 4);
            s3 = new Sphere(3, 0, 0, 4);
            ok1 = s1.Intersect(s3, out cp1);
            ok2 = s2.Intersect(s3, out cp2);
            ok3 = cp1.Intersect(cp2, out p1, out p2);
            Assert.True(ok3 && Point3sIn(new[] { p1, p2 }, "1.6999999999999999999999999999999999999999999999999999999999999687", "1.6999999999999999999999999999999999999999999999999999999999999588", "3.3793490497431602248862148954277896054676117242178299804869249311", "1.6999999999999999999999999999999999999999999999999999999999999687", "1.6999999999999999999999999999999999999999999999999999999999999588", "-3.3793490497431602248862148954277896054676117242178299804869249311"));

            var geogebra = G.Execute(
                G.Sphere(s1, "s1"),
                G.Sphere(s2, "s2"),
                G.Sphere(s3, "s3"),
                G.IntersectConic("s1", "s3", "i1"),
                G.IntersectConic("s2", "s3", "i2"),

                //ok1 ? G.EllipseXy(cp1.Xy, "Xy1") : "",
                //ok1 ? G.EllipseYz(cp1.Yz, "Yz1") : "",
                //ok1 ? G.EllipseZx(cp1.Zx, "Zx1") : "",

                //ok2 ? G.EllipseXy(cp2.Xy, "Xy2") : "",
                //ok2 ? G.EllipseYz(cp2.Yz, "Yz2") : "",
                //ok2 ? G.EllipseZx(cp2.Zx, "Zx2") : "",

                ok3 ? G.Point(p1, "P1") : "",
                ok3 ? G.Point(p2, "P2") : "",
                "");
        }

        [Fact]
        public void TwoCircle3Projections3()
        {
            Sphere s1, s2, s3;
            bool ok1, ok2, ok3;
            Circle3Projection cp1, cp2;
            Point3 p1, p2;

            s1 = new Sphere(0, 0, -0.05, 0.1);
            s2 = new Sphere(0.008090170100331306, 0.005877852439880371, 0, 0.12960000000000003);
            s3 = new Sphere(-0.008090170100331306, 0.005877852439880371, 0, 0.12960000000000003);
            ok1 = s1.Intersect(s2, out cp1);
            ok2 = s1.Intersect(s3, out cp2);
            ok3 = cp1.Intersect(cp2, out p1, out p2);
            Assert.True(ok3 && Point3sIn(new[] { p1, p2 }, "-0.00000000000000000000000000000000000000000000000000000000000001497092584062094997230878108366275350779611153592815247313951431809", "-0.09514624410062756896855688862792577559469393739747095177120756575788737997690294918688293286157286388387785051594280051155403693", "-0.08077648832378043483717787198693152592597280484814332105377159011117388525524809861162047457248165659023479309233683180398424698", "0.00000000000000000000000000000000000000000000000000000000000000619010853356281064508467211300307251714157491145113699979794170438", "0.08541496337492612182849662275064367675407183605006309493631560599239142899037040680727747530291975561978841025941698995944865572", "-0.10200273100193901690069233886641498543940063901023500536109235635913468417022295905344802859556911330672916244352622808988002000"));

            s1 = new Sphere(0, 0, -5, 10);
            s2 = new Sphere(0.8090170100331306, 0.5877852439880371, 0, 12.960000000000003);
            s3 = new Sphere(-0.8090170100331306, 0.5877852439880371, 0, 12.960000000000003);
            ok1 = s1.Intersect(s2, out cp1);
            ok2 = s1.Intersect(s3, out cp2);
            ok3 = cp1.Intersect(cp2, out p1, out p2);
            Assert.True(ok3 && Point3sIn(new[] { p1, p2 }, "-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000126", "-9.51462441006275689685568886279257755946939373974709517712075649433702758363823089785958096343975678574578099464608789521595692231", "-8.07764883237804348371778719869315259259728048481433209625856449036393954152033679590157912883487864108836999057654595322074891862", "-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000078", "8.54149633749261218284966227506436767540718360500630949363156065614499107909689654041039508342749982180215933372113994897039479471", "-10.20027310019390169006923388664149854394006390102350054431561422028694722159211831475786197795893724453475974376448145873730950371"));

            s1 = new Sphere(0, 0, -0.5, 1);
            s2 = new Sphere(0.09999999776482582, 0, 0, 0.529);
            s3 = new Sphere(-0.09999999776482582, -3.2162453120899073E-17, 0, 0.5760000000000001);
            ok1 = s1.Intersect(s2, out cp1);
            ok2 = s1.Intersect(s3, out cp2);
            ok3 = cp1.Intersect(cp2, out p1, out p2);
            Assert.True(ok3 && Point3sIn(new[] { p1, p2 }, "0.12983750290209432372020457761848589009994465348264675297945578167479626705549965076107274373800499989319017826789386419849006217", "0.26955668238983115767091806320527965715734503931759756741666107718282481650344604084148378539099464692636072965233878297694816287", "0.45419149955296517361036411953786070452884067307845323544598823342025852603558823565665630672953336139506729943224451556575491222", "0.12983750290209441041624812330641307202488733613827490745637243296194292060657885702462304882442198834346493093097710699722746001", "-0.26955668238983117729026987105372265135757331181068664433835796213289213519190167378175593215024070575307595489726117288502494447", "0.45419149955296515627115579796179481898404617945262535378192234450167209444098979574113660252619742293569049105163263890762755908"));

            s1 = new Sphere(0, 0, -0.5, 1);
            s2 = new Sphere(0.09999999776482582, 0, 0, 0.676);
            s3 = new Sphere(-0.09999999776482582, -3.2162453120899073E-17, 0, 0.529);
            ok1 = s1.Intersect(s2, out cp1);
            ok2 = s1.Intersect(s3, out cp2);
            ok3 = cp1.Intersect(cp2, out p1, out p2);
            Assert.True(ok3 && Point3sIn(new[] { p1, p2 }, "-0.44283750989818978438843099841142685404778650774499436840387939621124509950580304865812284318228512640132965353402406001079068133", "0.09465483480554797997534119656181478792712562529821275250394514226729844776255551248634806452244137195548137374071108010842232464", "0.39159149955296516804033304488635458504770249996947437808590290707146533586060558966443518380020704227880388376548940918302750963", "-0.44283750989818975394511344695136135442183752648759216800942909835744407809711908298568507449053590344641310255620628962418209219", "-0.09465483480554817975429051755347254585946126198646249530738012476725230588279074813022201416700027357432493572292406417452729830", "0.39159149955296516195166967068657739198394795870548051994697955210945284905911728503800201943714881972177922655733088996283042622"));

            s1 = new Sphere(0, 0, -0.5, 1);
            s2 = new Sphere(0.09510565549135208, 0.030901699792593718, 0, 0.676);
            s3 = new Sphere(0.09510565549135208, -0.030901699792593718, 0, 0.625);
            ok1 = s1.Intersect(s2, out cp1);
            ok2 = s1.Intersect(s3, out cp2);
            ok3 = cp1.Intersect(cp2, out p1, out p2);
            Assert.True(ok3 && Point3sIn(new[] { p1, p2 }, "0.34257132313037907705360432725260958383156837785961229655798875821481846557296326376373290507191046428457423898577102432017807237", "-0.53679085976932680398084655227682147828411118389725644352089170181016321345263381944427024227806713387928432634298916254375947373", "0.27103856027880228067239800588341652218332598353821315706266030318590307049174896510680273899141675233274552528379673658123045966", "-0.03556954610723606782493020702744651976614036975468381122965102386257463407761267139418421360421647872527226333015755655598418217", "-0.53679085976932680398084655227682147828411118389725644352089170181016321345263381944427024227806713387928415949633684021428467118", "0.34296523075262836367622381129227531177196274460109700328503118864563185586309129043745975279545436710962330112586552663962735152"));

            s1 = new Sphere(0, 0, -0.5, 1);
            s2 = new Sphere(-8.454004273517057E-05, -0.009197142906486988, 0, 0.6889);
            s3 = new Sphere(-0.00016157515347003937, 0.009196111932396889, 0, 0.6724000000000001);
            ok1 = s1.Intersect(s2, out cp1);
            ok2 = s1.Intersect(s3, out cp2);
            ok3 = cp1.Intersect(cp2, out p1, out p2);
            Assert.True(ok3 && Point3sIn(new[] { p1, p2 }, "-0.09352365963092608260252296173177895048826414138296494710124261436749885971939731353301726683896001441777318162068743438786063329", "0.61019762359124504429361353255698592762823165044588376749278477058860694201276758583168479229891070430655917786003665467261716816", "0.28670972108703214902407712967735281101502597986779694989996954351195879057875487218269155174768912954453697956481052481107561383", "0.08802192359420013624025637572406831583563023199777083594391001562108104803900005066723069721443365988388854790500835838701107105", "0.61095797754869733562299004515926688046579679707278949269592371549221734792824803353866731887967601060510256335682223834828630258", "0.28675440299777301961950185948047642995750936869841337700748343872526715941931023152238441372111267259250544504919356518275129695"));

            s1 = new Sphere(0, 0, -0.5, 1);
            s2 = new Sphere(-8.454004273517057E-05, -0.009197142906486988, 0, 0.6889);
            s3 = new Sphere(-0.00016157515347003937, 0.009196111932396889, 0, 0.6724000000000001);
            ok1 = s1.Intersect(s2, out cp1);
            ok2 = s1.Intersect(s3, out cp2);
            ok3 = cp1.Intersect(cp2, out p1, out p2);
            Assert.True(ok3 && Point3sIn(new[] { p1, p2 }, "-0.09352365963092608260252296173177895048826414138296494710124261436749885971939731353301726683896001441777318162068743438786063329", "0.61019762359124504429361353255698592762823165044588376749278477058860694201276758583168479229891070430655917786003665467261716816", "0.28670972108703214902407712967735281101502597986779694989996954351195879057875487218269155174768912954453697956481052481107561383", "0.08802192359420013624025637572406831583563023199777083594391001562108104803900005066723069721443365988388854790500835838701107105", "0.61095797754869733562299004515926688046579679707278949269592371549221734792824803353866731887967601060510256335682223834828630258", "0.28675440299777301961950185948047642995750936869841337700748343872526715941931023152238441372111267259250544504919356518275129695"));

            s1 = new Sphere(0, 0, -0.8, 1);
            s2 = new Sphere(-8.454004273517057E-05, -0.009197142906486988, 0, 0.361);
            s3 = new Sphere(-0.00016157515347003937, 0.009196111932396889, 0, 0.361);
            ok1 = s1.Intersect(s2, out cp1);
            ok2 = s1.Intersect(s3, out cp2);
            ok3 = cp1.Intersect(cp2, out p1, out p2);
            Assert.True(ok3 && Point3sIn(new[] { p1, p2 }, "0.33093323655739699655722553967113246786101967304300283808735385422906677142270800647592403542054553490409210263076527601132168968", "0.00138602313829004167548729317307942501816846277770535649988627152011046547289975959396642236404856339617527221253751569245000656", "0.14365315231895773322036796280607593113708281019295478160482606673423776903660488821491076667553538139891629682617968704652170056", "-0.33122353011575096320806880748218779933135027941508112462601415308732123953435692294257690086842657644306039832084252794643564797", "-0.00138723914135136105824539243301497578820196168141331168766981192490237257187496189571436526095546708576291526475541869119217022", "0.14355129625538903047143668985148142564117803891492163371454370899891974703901421802667417992462552264156495871877276613983193684"));


            var geogebra = G.Execute(
                G.Sphere(s1, "s1"),
                G.Sphere(s2, "s2"),
                G.Sphere(s3, "s3"),
                G.IntersectConic("s1", "s2", "i1"),
                G.IntersectConic("s1", "s3", "i2"),

                //ok1 ? G.EllipseXy(cp1.Xy, "Xy1") : "",
                //ok1 ? G.EllipseYz(cp1.Yz, "Yz1") : "",
                //ok1 ? G.EllipseZx(cp1.Zx, "Zx1") : "",

                //ok2 ? G.EllipseXy(cp2.Xy, "Xy2") : "",
                //ok2 ? G.EllipseYz(cp2.Yz, "Yz2") : "",
                //ok2 ? G.EllipseZx(cp2.Zx, "Zx2") : "",

                ok3 ? G.Point(p1, "P1") : "",
                ok3 ? G.Point(p2, "P2") : "",
                "");
        }
    }
}